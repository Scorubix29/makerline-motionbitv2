<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="^CdJ`6b=?dMuKp`mkLv*" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="e.Ouyt|rJD*KXvBoimW9"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MakerLine {" line1="" line2="    function angleToTime(angle: number, speed: number): number {" line3="        // You can fine-tune this formula for your own robot" line4="        const baseTime = 1000 // time in ms for 180 degrees at speed 100" line5="        return (angle / 180) * (baseTime * (100 / speed))" line6="    }" line7="" line8="    //% block=&quot;turn right $angle degrees at speed $speed&quot;" line9="    //% group=&quot;Motion&quot;" line10="    export function turnRightAngle(angle: number, speed: number): void {" line11="        const time = angleToTime(angle, speed)" line12="        motionbit.runMotor(leftMotor, MotionBitMotorDirection.Forward, speed)" line13="        motionbit.runMotor(rightMotor, MotionBitMotorDirection.Backward, speed)" line14="        basic.pause(time)" line15="        stopMotors()" line16="    }" line17="" line18="" line19="" line20="    //% block=&quot;turn left $angle degrees at speed $speed&quot;" line21="    //% group=&quot;Motion&quot;" line22="    export function turnLeftAngle(angle: number, speed: number): void {" line23="        const time2 = angleToTime(angle, speed)" line24="        motionbit.runMotor(leftMotor, MotionBitMotorDirection.Backward, speed)" line25="        motionbit.runMotor(rightMotor, MotionBitMotorDirection.Forward, speed)" line26="        basic.pause(time2)" line27="        stopMotors()" line28="    }" line29="" line30="" line31="    export enum SensorPosition {" line32="        //% block=&quot;Left&quot;" line33="        Left," line34="        //% block=&quot;Mid-Left&quot;" line35="        MidLeft," line36="        //% block=&quot;Center&quot;" line37="        Center," line38="        //% block=&quot;Mid-Right&quot;" line39="        MidRight," line40="        //% block=&quot;Right&quot;" line41="        Right" line42="    }" line43="" line44="  " line45="    let pinMap: DigitalPin[] = []" line46="" line47="    //% block=&quot;set $pos IR sensor pin to $pin&quot;" line48="    //% group=&quot;Setup&quot;" line49="    export function setSensorPin(pos: SensorPosition, pin: DigitalPin): void {" line50="        pinMap[pos] = pin" line51="    }" line52="" line53="   " line54="" line55="    let leftMotor: MotionBitMotorChannel = MotionBitMotorChannel.M1" line56="    let rightMotor: MotionBitMotorChannel = MotionBitMotorChannel.M2" line57="" line58="    //% block=&quot;set left motor to $left and right motor to $right&quot;" line59="    //% group=&quot;Setup&quot;" line60="    export function setMotors(left: MotionBitMotorChannel, right: MotionBitMotorChannel): void {" line61="        leftMotor = left" line62="        rightMotor = right" line63="    }" line64="" line65="" line66="    //% block=&quot;sensor $pos detects black line&quot;" line67="    //% group=&quot;Sensors&quot;" line68="    export function sensorDetectsLine(pos: SensorPosition): boolean {" line69="        return pins.digitalReadPin(pinMap[pos]) == 0" line70="    }" line71="" line72="    //% block=&quot;move forward at speed $speed&quot;" line73="    //% group=&quot;Motion&quot;" line74="    export function moveForward(speed: number): void {" line75="        motionbit.runMotor(leftMotor, MotionBitMotorDirection.Forward, speed)" line76="        motionbit.runMotor(rightMotor, MotionBitMotorDirection.Forward, speed)" line77="    }" line78="" line79="    //% block=&quot;turn left at speed $speed&quot;" line80="    //% group=&quot;Motion&quot;" line81="    export function turnLeft(speed: number): void {" line82="        motionbit.brakeMotor(leftMotor)" line83="        motionbit.runMotor(rightMotor, MotionBitMotorDirection.Forward, speed)" line84="    }" line85="" line86="    //% block=&quot;turn right at speed $speed&quot;" line87="    //% group=&quot;Motion&quot;" line88="    export function turnRight(speed: number): void {" line89="        motionbit.runMotor(leftMotor, MotionBitMotorDirection.Forward, speed)" line90="        motionbit.brakeMotor(rightMotor)" line91="    }" line92="" line93="    //% block=&quot;stop motors&quot;" line94="    //% group=&quot;Motion&quot;" line95="    export function stopMotors(): void {" line96="        motionbit.brakeMotor(leftMotor)" line97="        motionbit.brakeMotor(rightMotor)" line98="    }" line99="" line100="    //% block=&quot;follow line at speed $speed&quot;" line101="    //% group=&quot;Line Following&quot;" line102="    export function followLine(speed: number): void {" line103="        if (sensorDetectsLine(SensorPosition.Center)) {" line104="            moveForward(speed)" line105="        } else if (sensorDetectsLine(SensorPosition.MidLeft)) {" line106="            turnLeft(speed)" line107="        } else if (sensorDetectsLine(SensorPosition.MidRight)) {" line108="            turnRight(speed)" line109="        } else {" line110="            stopMotors()" line111="        }" line112="    }" line113="}" numlines="114"></mutation></block></statement></block></xml>